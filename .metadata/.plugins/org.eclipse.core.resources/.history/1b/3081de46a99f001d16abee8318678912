package com.jojov.orderapi.services;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jojov.orderapi.converters.UserConverter;
import com.jojov.orderapi.dtos.LoginRequestDTO;
import com.jojov.orderapi.dtos.LoginResponseDTO;
import com.jojov.orderapi.entity.User;
import com.jojov.orderapi.exceptions.GeneralServiceException;
import com.jojov.orderapi.exceptions.NoDataFoundException;
import com.jojov.orderapi.exceptions.ValidateServiceException;
import com.jojov.orderapi.repository.UserRepository;
import com.jojov.orderapi.validators.UserValidators;

import io.jsonwebtoken.Jwts;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class UserServices {
	
	
	@Autowired
	private UserRepository userRepo;
	
	@Autowired
	private  UserConverter userConverter;
	
	// Servicio para dar de alta a un usuario
	public User createUser(User user) {
		try {
			//Logida de negocio

			UserValidators.signup(user);
			
			User existUser = userRepo.findByUsername(user.getUsername())
					.orElse(null);
			if(existUser != null) {
				throw new ValidateServiceException("El nombre de usuario ya existe");
			}
			 return userRepo.save(user);
						
			
		} catch (ValidateServiceException | NoDataFoundException e) {
			log.info(e.getMessage(), e);
			throw e;
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new GeneralServiceException(e.getMessage(), e);
		}
	}
	
	public LoginResponseDTO login(LoginRequestDTO request) {
		try {
			//Hacer el login, buscar un usuario por su username
			User user = userRepo.findByUsername(request.getUsername())
					.orElseThrow(() -> new ValidateServiceException("Usuario o password incorrectos"));
			//validar password
			if(!user.getPassword().equals(request.getPassword())) throw new ValidateServiceException("Usuario o password incorrectos");
			
			
			//Necesitaremos el convertir para convertir la entidad usuario en DTO
			return new LoginResponseDTO(userConverter.fromEntity(user), "TOKEN");
			
			
		} catch (ValidateServiceException | NoDataFoundException e) {
			log.info(e.getMessage(), e);
			throw e;
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new GeneralServiceException(e.getMessage(), e);
		}
	}
	
	public String createToken(User user) {
		
		Date now = new Date();
		Date  expiryDate = new Date(now.getTime() + (1000 * 60 * 60));
		
		return Jwts.builder()
	}
	
	
}
