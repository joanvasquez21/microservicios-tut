package com.jojov.orderapi.security;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.config.core.userdetails.ReactiveUserDetailsServiceResourceFactoryBean;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import com.jojov.orderapi.entity.User;
import com.jojov.orderapi.exceptions.NoDataFoundException;
import com.jojov.orderapi.repository.UserRepository;
import com.jojov.orderapi.services.UserServices;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;

//onceper se ejecuta para cada peticion que llegue a spring se va a ejecutar el filtro
@Slf4j
public class TokenAuthenticationFilter extends OncePerRequestFilter {

	//El primer paso es obtener el token
	
	@Autowired
	private UserServices userService;
	
	@Autowired
	private UserRepository userRepo;
	
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
	
		String jwt = getJwtFromRequest(request);
		if(StringUtils.hasText(jwt) && userService.validateToken(jwt) ) {
			String userName = userService.getUsernameFromToken(jwt);
			User user = userRepo.findByUsername(userName)
					.orElseThrow(() -> new NoDataFoundException("No existe el usuario"));
		
			
			UserPrincipal principal = UserPrincipal.create(user);
			//Generar una clase que encapsula 
			UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(principal, null, principal.getAuthorities())
		}
	}
	
	public String getJwtFromRequest(HttpServletRequest request) {
		return "TOKEN GENERADO";
		
	}

	
}
