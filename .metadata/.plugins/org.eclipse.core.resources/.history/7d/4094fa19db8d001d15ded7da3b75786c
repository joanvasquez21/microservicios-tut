package com.jojov.orderapi.controllers;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import com.jojov.orderapi.entity.Product;
import com.jojov.orderapi.repository.ProductRepository;

@RestController
public class ProductController {
	
	@Autowired
	ProductRepository productRepo;
	
	private List<Product> products = new ArrayList<>();

	// Para hacer un CRUD de un producto, necesitamos crear 4 metodos:
	// 1. Permita consultar todos los productos,3. crearlo 2. Consultar producto por
	// id, 3. actualizar .4. eliminar

	// Metodo constructor
	public ProductController() {
		for (int c = 0; c <= 10; c++) {
			products.add(Product.builder().id((c + 1L)).name("Product = " + (c + 1L)).build());
		}
	}

	@GetMapping(value = "/products")
	public ResponseEntity<Product> findAll() {
		
		List<Product> products = productRepo.findAll();
		return new ResponseEntity<List<Product>>(products, HttpStatus.OK);
	}

	// permite consultar por un solo producto
	@GetMapping(value = "/products/{productId}")
	public ResponseEntity<Product> findById(@PathVariable("productId") Long productId) {
		Product product =  productRepo.findById(productId)
									.orElseThrow(()-> new RuntimeException("No existe el producto"));
		
		return new ResponseEntity<Product>(product, HttpStatus.OK);
	}
	
	@DeleteMapping(value = "/products/{productId}")
	public ResponseEntity<Void> delete(@PathVariable("productId") Long productId) {
		// Primero traemos el producto que queremos borrar,  para saber si existe
		Product product = productRepo.findById(productId)
				.orElseThrow(()-> new RuntimeException("No existe el producto"));	
		// En caso de que exita, lo elimina
		productRepo.delete(product);
		return new ResponseEntity(HttpStatus.OK);

	}
	

	// Creacion
	@PostMapping(value = "/products")
	public Product createProduct(@RequestBody Product product) {
		// Ya he recibido el producto, ahora toca grabarlo
		this.products.add(product);
		return product;
	}

	@PutMapping(value = "/products")
	public Product updateProduct(@RequestBody Product product) {
		for (Product prod : this.products) {
			if (prod.getId().longValue() == product.getId().longValue()) {
				prod.setName(product.getName());
				return prod;
			}
		}
		throw new RuntimeException("No existe el producto");
	}

	
}
